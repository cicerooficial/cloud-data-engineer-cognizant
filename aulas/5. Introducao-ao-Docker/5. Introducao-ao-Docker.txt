# Introdução ao Docker

## Introdução

### VM e Container



### Arquitetura do Docker

Terminologias

Container image: Pacote com todas as dependências que criam os containers das aplicações.

Dockerfile: Arquivo de texto que contém todas as instruções para fazer o build da image.

Build: Ação que cria uma image a partir do Dockerfile. 

Container: É uma instancia da image que representa uma aplicação, processo ou serviço.

Volume: Permite que o Container armazene arquivos (dados em disco).

Tag: Ajuda no versionamento das imagens.

Multi-stage Build: Como existem vários estágios de build, pode-se usar o arquivo build para compilar várias aplicações e imagens.

Repository: Box com várias imagem disponíveis.

Registry: Serviço que provê acesso do Docker ao repository.

Docker Hub: Repositório público de imagens públicas e privadas.

Compose: Ferramenta que utiliza meta-data, que com um único comando pode-se utilizar múltiplos containers para orquestrá-los melhor.

### Criando nosso primeiro container

Iniciar com o docker sem instalação: https://labs.play-with-docker.com/

docker run --name meu-primeiro-container -p 80:80 -d nginx //Criação de container e instalação da image nginx

docker images //Visualizar imagens ativas

docker rm meu-primeiro-container ou  docker rm <primeiras letras do ID Image> //Remover imagem

docker rm -f meu-primeiro-container //Forçar a remoção

docker rmi nginx //Remover a imagem

### Instalando Docker no Linux

Criar máquina virtual Azure e segui os passos do link para conexão SSH via PUTTY - https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ssh-from-windows



------

## Primeiros passos com o Docker

### Principais Comandos

run - Criar o container

ps - Listar os containers

info  - Acesso a informações do docker

images - Imagens utilizadas para criar os containers

exec - Executa os binários do containers para fazer execução do ssh para entrar no container

stop, start - Parar e iniciar o container

logs - listas os logs outputs do containers

inspect - Listas as configurações utilizadas pelos containers

pull - baixar imagens dos repositórios privado ou público

commit - comentar as modificaçõs dos containers

tag - melhorar o versionamento

login, logout - Logar no repositório privado ou público

push -compartilhar imagem ou armazenar no repositório

searsh - procurar image

rm - reparar ou remover container

rmi - remover uma image

export, import - exportar ou importar container

save, load - Salvar ou carregar uma imagem de docker

Clonar o repositório: `git clone https://github.com/luistkd4/docker101`

cd IntroComands

ls -ll //Verificar logos os arquivos do diretório

dive <nomedoContainer> //Verifica todas as camadas doi container

docker login //autenticar usuario e senha do docker hub

Executar os comandos abaixo:`##Instalar explorador de imagem
#https://github.com/wagoodman/dive
wget https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb
sudo apt install ./dive_0.9.2_linux_amd64.deb

Docker RUN

Comando utilizado para criar um container

docker run --name newcontainer hello-world
docker run --name hello -d busybox sleep 3600
docker run --name site -d -p 80:80 nginx

#Docker PS
#Lista os container em execução, para listar os que não estão precisamos colocar o parâmetro -a
docker ps -a

#Docker INFO
#Exibe um sumuário dos nossos container, como também especificações do nosso docker
docker info

#Docker EXEC
#Adiciona um processo a mais no container
#Vamos criar uma pasta dentro do container
docker exec hello mkdir teste

Acessamos o container com o servico SH

docker exec -it hello sh

#Docker STOP, START
#Paramos nosso container
docker stop hello
#Iniciamos nosso container
docker start hello

#Docker LOGS
#coletamos o output do nosso container, ótimo para debugar uma aplicação
docker logs site

#Docker PULL
docker pull hello-world

#Docker COMMIT
docker commit --author="Luis Miguel" --message="Imagem com commit" hello hello

#Docker TAG
#Preparando para docker hub
docker tag hello luistkd4/hello:1.0
#Trocando um nome de um repositorio
docker tag hello-world ola-mundo

#Docker LOGIN,LOGOUT
#Logar no repositório local, ou público. Por padrão logamos no Docker HUB
docker login <usuário>

#Docker PUSH
#Vamos versionar nosso repositório/imagem ao docker hub
docker push luistkd4/hello:1.0

#Docker SEARCH
#Procura por uma imagem no repositório
docker search <consulta>

#Docker RM
#Remove um container previamente parado
docker rm newcontainer
#para remover um container em execução é nesessário o parâmetro -f
docker rm -f site

#Docker RMI
#Remove um repositório/imagem local, se algum container estiver parado que utiliza essa imagem deverá passar o parâmetro -f
docker rmi hello-world

#Docker EXPORT,IMPORT
#Exporta o container mergeando as suas camadas
docker export hello > export.tar
#Importa o arquivo gerado, criando uma imagem do container a partir dela
cat export.tar | docker import - hello-export:latest

#Docker SAVE,LOAD
#Exporta a imagem em um arquivo
docker save luistkd4/hello:1.0 > save.tar
#Importa o arquivo gerado
docker load < save.tar`

Obs.:
curl localhost //Verificar internamente o arquivo
netstat -nltp //Verificar as postar abertas no servidor
docker info //Sumário do que está sendo executado na máquina

------

## Rede do Docker

### Tipos de rede e como funciona

- Bridge: É a rede default do Docker, utilizado para comunicação entre containers.
- Host: Remove o isolamento de rede, o container responde diretamente pela placa de rede do host.
- Overlay: Permite a comunicação entre containers de hosts diferentes.
- Macvlan: Permite atribuir um endereçamento MAC (virtual) ao container tornando ele visível como um dispositivo físico na rede.
- None: Sem rede.

### Exemplos Práticos - Parte 1

#Git do projeto
https://github.com/mark-church/docker-pets

Criamos a rede bridge

$ docker network create -d bridge petsBridge
#Criamos o backend
$ docker run -d --net petsBridge --name db consul
#Criamos o frontend
$ docker run -it --env "DB=db" --net petsBridge --name web -p 8000:5000 chrch/docker-pets:1.0

### Exemplos Práticos - Parte 2

#TCP port 2377 for cluster management communications
#TCP and UDP port 7946 for communication among nodes
#UDP port 4789 for overlay network traffic

#Escolha um servidor para ser o principal
#Iniciando o swarm
docker swarm init --advertise-addr 192.168.0.28

#No servidor secundário
#Ingresse o servidos ao cluster swarm
docker swarm join --token SWMTKN-1-2xs8wa75la9ugfaiby0bjtpj71uqi48idxlykvjyft6g45lypo-30uglrk1mhg1yplvptarhp7cv 192.168.0.28:2377

#Listamos os nodes para verificar se estão funcionais
docker node ls

#Criamos a rede overlay
docker network create -d overlay petsOverlay

#Criamos nosso backend
docker service create --network petsOverlay --name db consul

#Criamos nosso frontend
docker service create --network petsOverlay -p 8000:5000 -e 'DB=db' --name web chrch/docker-pets:1.0

#listamos nossos serviços
docker service ls

#Escalar a aplicação
docker service scale <nome do serviço>=3

------

## Armazenamento no Docker

### Tipos de armazenamento

Volume: Disco virtual, de domínio da docker enginner. Assim o host não precisa ter uma estrutura de arquivos. Mas utiliza mais da memória em disco. Pode ser criado durante a criação do container e é mais aconselhados para utilizar em ambientes replicados.

Binds Mount: Mias simples, mapeia arquivo/diretório do host para o container, como se fosse compartilhada. 

Obs: Ambas acima, se o cluster for reiniciado as informações são persistidas.

tmpfs Mount: Armazenamento temporário (ex: cache), tem objetivo de utilizar arquivos em streamer (tempo real), assim quando o container reiniciar, os arquivos são deletados. Otimizando o uso de recursos no início do container. 

### Exemplos práticos

#--mount é mais verboso do que utilizar -v ou --volume

#Criando um disco utilizando -v

meuPrimeiroVolume:/path/inContainer:ro

docker volume create meuPrimeiroVolume

#listar volume
docker volume list

#inspecionar o volume criado
docker volume inspect meuPrimeiroVolume

#remover o volume
docker volume rm meuPrimeiroVolume

#Criado container com volume
docker run -d --name container-volume -p 80:80 --mount source=meuPrimeiroVolume,target=/usr/share/nginx/ nginx:latest

#Inspecione o container criado
docker inspect container-volume

#bind irá mapear uma pasta do seu host para o container

#vamos criar uma pasta no host e mapea-la para o container:
mkdir /html

#vamos mapear essa pasta criada:
docker run -d --name container-volume -p 80:80 -v /html:/usr/share/nginx/html nginx:latest

#Cria um volume para armazenar arquivos temporários, evitando armazenar dados na camada de escrita
 docker run -d --name tmptest --mount type=tmpfs,destination=/cache,tmpfs-size=1000000 busybox sleep 3600

 #Comando dd para criar o arquivo de 1mb
 dd if=/dev/zero of=output.file bs=1024 count=1024

------

## Nosso projeto no ar

### Limites

#Podemos limitar a utilização de recursos dos nossos containers

#Para limitar a utilização de memória precisamos usar o parâmetro -m ou --memory
docker run -d --memory 10m busybox sleep 3600

#Abaixo temos um container de teste de strees onde -c é a quantidade de cores para estressar e -t o tempo do teste
docker run -d --rm progrium/stress --vm-bytes 60M -t 30s

#Containers também possuem memória swap, para limitar:
docker run -d --memory-swap 150m

#Podemos utilizar o docker stats para monitorar em tempo real o consumo dos recursos
docker stats

#Importante: Sempre limite a quantidade de memória em seu container, caso sua aplicação consuma muita memória...
#...o Kernel do linux irá finalizar aplicações para sobrar memória para o sistema

#WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.
#1 - Logue como root na máquina
#2 - Edite /etc/default/grub adicione alinha abaixo sem a hashtag(#)
#GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"
#3 - Execute: update-grup
#4 - Reinicie a máquina
#Ref: https://docs.docker.com/engine/install/linux-postinstall/



#Podemos limitar a utilização de recursos dos nossos containers

#Para limitar a utilização de cpu precisamos usar o parâmetro --cpus
#Se temos somente 1 CPU, se quisermos que ele use somente metada disso devemos criar o container da seguinte forma:
docker run -d --cpus=".5" ubuntu

#Abaixo temos um container de teste de strees onde -c é a quantidade de cores para estressar e -t o tempo do teste
docker run -d --rm progrium/stress -c 8 -t 30s

#Podemos utilizar o docker stats para monitorar em tempo real o consumo dos recursos
docker stats

### Implementando nosso projeto

git clone https://github.com/luistkd4/docker101.git